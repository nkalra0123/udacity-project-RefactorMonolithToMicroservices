version: '3'

services:

  # Proxies requests to internal services
  reverse-proxy:
    image: reverse-proxy
    build:
      context: ./reverse-proxy
    container_name: reverse_proxy_container
    depends_on:
        - udagram-api-feed
        - udagram-api-users
    ports:
      - 8080:8080

  # generates weather reports
  udagram-frontend:
    image: udagram-frontend
    container_name: udagram-frontend_container
    build:
      context: ./udagram-frontend
    depends_on:
        - udagram-api-feed
        - udagram-api-users
    ports:
      - 8100:80
    restart: on-failure


  # generates a feed microservice container
  udagram-api-feed:
    image: udagram-api-feed
    container_name: udagram-api-feed_container
    build:
      context: ./udagram-api-feed
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_PROFILE=${AWS_PROFILE}
      - JWT_SECRET=${JWT_SECRET}
      - URL=${URL}
    ports:
      - 8081:8080
    restart: on-failure


  # Generates a user microservice container
  udagram-api-users:
    image: udagram-api-users
    container_name: udagram-api-users_container
    build:
      context: ./udagram-api-users
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_PROFILE=${AWS_PROFILE}
      - JWT_SECRET=${JWT_SECRET}
      - URL={URL}

    ports:
      - 8082:8080
    restart: on-failure
